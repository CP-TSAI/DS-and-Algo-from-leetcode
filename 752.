class Solution{
public:
	int openLock(vector<string>& deadends, string target){
		int res = 0;
		unordered_set<string> deadend;
		unordered_set<string> visited = {"0000"};
		for(auto s: deadends) deadend.insert(s);
		if(deadend.count("0000")) return -1;
		queue<string> q{{"0000"}};
		while(!q.empty()){
			res++;
			int size = q.size();
			for(int i = 0; i < size; i++){
				string tmp = q.front(); q.pop();
				for(int j = 0; j < 4; j++){
					for(int k = -1; k <= 1; k++){
						if(k == 0) continue;
						string tmp_next = tmp;
						tmp_next[j] = (tmp_next[j]-'0' + k + 10) % 10 + '0';
						if(tmp_next == target) return res;
						if(deadend.count(tmp_next) == 0 && visited.count(tmp_next) == 0){
							q.push(tmp_next);
							visited.insert(tmp_next);
						}
					}
				}
			}
		}
		return -1;
	}
};
